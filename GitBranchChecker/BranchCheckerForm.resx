<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AP//gAP//+AH///wD///+B////w////+f/8=
</value>
  </data>
</root>